// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  userIds  String[]   @db.ObjectId
  wishlist Products[] @relation(fields: [userIds], references: [id])

  wishlistProducts ProductRecords[] @relation(fields: [userIds], references: [id])

  accounts Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Categories {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  image String
  stock Int

  products Products[]
  productRecords ProductRecords[]
}

model Brand {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  image String?

  Products Products[]
  productRecords ProductRecords[]
}

model Products {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Float
  discount    Int?
  rating      Float
  description String
  image_1     String
  image_2     String?
  image_3     String?
  image_sm    String?
  stock       Int

  categoryId String     @db.ObjectId
  category   Categories @relation(fields: [categoryId], references: [id])

  brandId String @db.ObjectId
  brand   Brand  @relation(fields: [brandId], references: [id])

  wishlistedByIds String[] @db.ObjectId
  wishlistedBy    User[]   @relation(fields: [wishlistedByIds], references: [id])
}

model ProductRecords {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Float
  discount    Int?
  rating      Float
  description String
  image_1     String
  image_2     String?
  image_3     String?
  image_sm    String?
  stock       Int

  categoryId String     @db.ObjectId
  category   Categories @relation(fields: [categoryId], references: [id])

  brandId String @db.ObjectId
  brand   Brand  @relation(fields: [brandId], references: [id])

  wishlistedByIds String[] @db.ObjectId
  wishlistedBy    User[]   @relation(fields: [wishlistedByIds], references: [id])
}
